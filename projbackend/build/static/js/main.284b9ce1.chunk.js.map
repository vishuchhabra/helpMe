{"version":3,"sources":["backend.js","Components/image/imageHelper.js","Components/Card/Card.js","Components/Header/Header.js","Components/Footer/Footer.js","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["API","ImageHelper","product","imageurl","_id","src","alt","style","maxHeight","maxWidth","className","Card","name","category","description","amountDonated","type","address","updatedAt","substring","Header","fontSize","Footer","href","Home","useState","products","setProducts","setError","loadAllProduct","fetch","method","then","res","console","log","json","catch","err","data","error","useEffect","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oQAAaA,G,WAAM,6BCkBJC,EAdK,SAAC,GAAgB,IAAdC,EAAa,EAAbA,QACbC,EAAWD,EAAO,UAAOF,EAAP,0BAA4BE,EAAQE,KAApC,iHACxB,OACI,6BACA,yBACEC,IAAKF,EACLG,IAAI,QACJC,MAAO,CAAEC,UAAW,OAAQC,SAAU,QACtCC,UAAU,mBCuBLC,EA/BD,SAAC,GAAc,IAAbT,EAAY,EAAZA,QACd,OACE,yBAAKQ,UAAU,QAEb,kBAAC,EAAD,CAAcR,QAASA,IACvB,uBAAGQ,UAAU,iBAAgB,yCAA7B,KAAsDR,EAAQU,MAE9D,uBAAGF,UAAU,iBAAgB,6CAA7B,KAA0DR,EAAQW,SAASD,KAA3E,KACA,uBAAGF,UAAU,qBACRR,EAAQY,aAGb,uBAAGJ,UAAU,kBACX,uBAAGA,UAAU,qBAAb,qBADF,KAC2DR,EAAQa,cADnE,KAIA,4BAAQL,UAAU,oBAAoBM,KAAK,UAA3C,eAIA,uBAAGN,UAAU,iBACX,0BAAMA,UAAU,oBAAhB,aADF,IACuDR,EAAQe,SAG/D,uBAAGP,UAAU,cACX,0BAAMA,UAAU,uBAAhB,oBAA8DR,EAAQgB,UAAUC,UAAU,EAAE,O,MCdrFC,MAZf,WACE,OACE,yBAAKV,UAAU,gBACb,wBAAIA,UAAU,iBAAd,UACA,8BACE,uBAAGH,MAAO,CAAEc,SAAU,SAAtB,wBAEF,uBAAGX,UAAU,qB,MCMJY,MAbf,WACE,OACE,4BAAQZ,UAAU,UAEhB,uBAAGa,KAAK,uGACN,4BAAQb,UAAU,UAChB,kD,OCMK,SAASc,IAAQ,IAAD,EAEGC,mBAAS,IAFZ,mBAEtBC,EAFsB,KAEZC,EAFY,OAGJF,oBAAS,GAHL,mBAGfG,GAHe,WAKvBC,EAAiB,WAddC,MAAM,GAAD,OAAI9B,EAAJ,aAAmB,CAC3B+B,OAAO,QACRC,MAAM,SAAAC,GAEH,OADAC,QAAQC,IAAIF,GACLA,EAAIG,UACdC,OAAM,SAAAC,GAAG,OAAIJ,QAAQC,IAAIG,MAUdN,MACZ,SAAAO,GACKA,EAAKC,MACNZ,EAASW,EAAKC,OAIdb,EAAYY,OAYpB,OANFE,qBAAU,WACLZ,MACD,IAME,yBAAKnB,UAAU,mBACb,yBAAKA,UAAU,uBAEhB,yBAAKA,UAAU,OACZgB,EAASgB,KAAI,SAACxC,EAASyC,GAEtB,OADET,QAAQC,IAAIjC,GAEZ,yBAAK0C,IAAKD,EAAOjC,UAAU,sBAC1B,kBAAC,EAAD,CAAMR,QAASA,UC9Bd2C,MAZf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKnC,UAAU,QACf,kBAACc,EAAD,OAEA,kBAAC,EAAD,QCHcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAG,GACLN,QAAQM,MAAMA,EAAMqB,c","file":"static/js/main.284b9ce1.chunk.js","sourcesContent":["export const API = \"http://localhost:4001/api\"","import React from 'react'\r\nimport { API } from '../../backend'\r\n\r\n\r\nconst ImageHelper = ({ product }) =>{\r\n    const imageurl = product ?  `${API}/product/photo/${product._id}`: `https://images.pexels.com/photos/3561339/pexels-photo-3561339.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940`\r\n    return (\r\n        <div >\r\n        <img\r\n          src={imageurl }\r\n          alt=\"photo\"\r\n          style={{ maxHeight: \"100%\", maxWidth: \"100%\" }}\r\n          className=\"mb-3 rounded\"\r\n        />\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default ImageHelper ","import React from \"react\";\r\nimport \"./Card.css\";\r\nimport ImageHelper from \"../image/imageHelper\";\r\n\r\nconst  Card  =({product})=> {\r\n  return (\r\n    <div className=\"card\">\r\n\r\n      <ImageHelper  product={product}/>\r\n      <p className=\"card__heading\"><strong> Name</strong>: {product.name}</p>\r\n      \r\n      <p className=\"card__heading\"><strong> Category</strong>: {product.category.name} </p> \r\n      <p className=\"card__description\">\r\n          {product.description}\r\n      </p> \r\n\r\n      <p className=\"card__donation\">\r\n        <p className=\"donation__heading\"> Amount Donated: </p> ${product.amountDonated} </p>\r\n\r\n      {/* Add Donate Here Button and Date of the post */}\r\n      <button className=\"btn  donate__here\" type=\"submit\">\r\n        Donate Here\r\n      </button>\r\n\r\n      <p className=\"card__address\">\r\n        <span className=\"address__heading\">Address: </span> {product.address}\r\n      </p>\r\n\r\n      <p className=\"post__date\">\r\n        <span className=\"post__date__heading\">Last Edited On: </span>{product.updatedAt.substring(0,10)}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"site__navbar\">\r\n      <h1 className=\"site__heading\">HelpMe</h1>\r\n      <span>\r\n        <i style={{ fontSize: \"20px\" }}>Serving For Society</i>\r\n      </span>\r\n      <p className=\"site__subtitle\"></p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      {/* <span className=\"copy\"><strong> &copy; Copyright 2020 </strong></span> */}\r\n      <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSd3D4sAKQbXFvfurhrZob79nnQddDUqaUfeRbszIdKpCi3trw/viewform\">\r\n        <button className=\"button\">\r\n          <strong>CONTACT US</strong>\r\n        </button>\r\n      </a>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React,{useEffect,useState} from \"react\";\r\nimport { API } from \"../backend\";\r\nimport Card from \"./Card/Card\";\r\n\r\n\r\nconst getProducts = () =>{\r\n    return fetch(`${API}/products`,{\r\n        method:\"GET\"\r\n    }).then (res =>{\r\n          console.log(res)\r\n          return res.json()\r\n    }).catch(err => console.log(err))\r\n}\r\n\r\n\r\nexport default function Home() {\r\n\r\n  const [products ,setProducts] = useState([])\r\n  const [error ,setError]= useState(false)\r\n\r\n  const loadAllProduct = ()=>{\r\n    getProducts().then(\r\n      data =>{\r\n        if(data.error){\r\n          setError(data.error)\r\n\r\n        }\r\n        else{\r\n          setProducts(data)\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\nuseEffect(()=>{\r\n     loadAllProduct()\r\n  },[])\r\n\r\n    \r\n\r\n  return (\r\n\r\n      <div className=\"row text-center\">\r\n        <div className=\"col-12 text-center\">\r\n       </div>\r\n       <div className=\"row\">\r\n         {products.map((product, index)=>{\r\n             console.log(product)\r\n           return(\r\n             <div key={index} className=\"col-lg-4 mb-4 mt-4\">\r\n              <Card product={product}/>\r\n             </div>\r\n           )\r\n         })}\r\n       </div>\r\n      </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Card from \"./Components/Card/Card\";\r\nimport Header from \"./Components/Header/Header\";\r\nimport Footer from \"./Components/Footer/Footer\";\r\nimport Home from \"./Components/Home\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"body\">\r\n      <Home></Home>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}